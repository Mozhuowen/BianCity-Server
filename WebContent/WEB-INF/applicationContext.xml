<?xml version="1.0" encoding="UTF-8"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
	   <!-- <property name="driverClass" value="com.p6spy.engine.spy.P6SpyDriver"/> -->
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost/putao?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="root"/>
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="0603"/>
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="50"/>
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="1"/>
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="5"/>
		<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
		<property name="maxIdleTime" value="20"/>
	</bean>
	
	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>domain/town.hbm.xml</value>
				<value>domain/users.hbm.xml</value>	
				<value>domain/putao.hbm.xml</value>
				<value>domain/image.hbm.xml</value>		
				<value>domain/comment.hbm.xml</value>		
				<value>domain/WeiboUser.hbm.xml</value>	
				<value>domain/MessBoard.hbm.xml</value>
				<value>domain/QQUser.hbm.xml</value>
				<value>domain/Version.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 配置Hibernate属性 -->
			<value>
			hibernate.use_sql_comments=true
			hibernate.show_sql=false
			hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
			<!-- hibernate.dialect=org.hibernate.dialect.MySQLDialect -->
			hibernate.hbm2ddl.auto=validate
			hibernate.format_sql=true;
			</value>
		</property>
	</bean>	
	<!-- 配置DAO组件模板 -->
	<bean id="daoTemplate" abstract="true" lazy-init="true"
		p:sessionFactory-ref="sessionFactory"/>
	<!-- DAO -->
	<bean id="usersDao" class="dao.Impl.usersDaoImpl" parent="daoTemplate"/>
	<bean id="townDao" class="dao.Impl.townDaoImpl" parent="daoTemplate"/>
	<bean id="putaoDao" class="dao.Impl.putaoDaoImpl" parent="daoTemplate"/>
	<bean id="commentDao" class="dao.Impl.commentDaoImpl" parent="daoTemplate"/>
	<bean id="WeiboUserDao" class="dao.Impl.WeiboUserDaoImpl" parent="daoTemplate"/>
	<bean id="MessBoardDao" class="dao.Impl.MessBoardDaoImpl" parent="daoTemplate"/>
	<bean id="QQUserDao" class="dao.Impl.QQUserDaoImpl" parent="daoTemplate"/>
	<bean id="VersionDao" class="dao.Impl.VersionDaoImpl" parent="daoTemplate"/>
	
	<!-- 定义service业务逻辑组件，并注入dao -->
	<bean id="usersService" class="service.Impl.usersServiceImpl">
		<property name="user" ref="usersDao"/>
		<property name="weibo" ref="WeiboUserDao"/>
		<property name="qquser" ref="QQUserDao"/>
	</bean>
	<bean id="townService" class="service.Impl.townServiceImpl">
		<property name="user" ref="usersDao"/>
		<property name="towndao" ref="townDao"/>
	</bean>
	<bean id="putaoService" class="service.Impl.putaoServiceImpl">
		<property name="townx" ref="townDao"/>
		<property name="putaox" ref="putaoDao"/>
	</bean>
	<bean id="commentService" class="service.Impl.commentServiceImpl">
		<property name="townx" ref="townDao"/>
		<property name="putaox" ref="putaoDao"/>
		<property name="commentx" ref="commentDao"/>
		<property name="user" ref="usersDao"/>
		<property name="userservice" ref="usersService"/>
	</bean>
	<bean id="messService" class="service.Impl.messServiceImpl">
		<property name="townx" ref="townDao"/>
		<property name="user" ref="usersDao"/>
		<property name="mess" ref="MessBoardDao"/>
	</bean>
	<bean id="goodService" class="service.Impl.goodServiceImpl">
		<property name="townx" ref="townDao"/>
		<property name="mess" ref="MessBoardDao"/>
		<property name="putaox" ref="putaoDao"/>
		<property name="commentx" ref="commentDao"/>
		<property name="user" ref="usersDao"/>
		<property name="userservice" ref="usersService"/>
	</bean>
	<bean id="subscriService" class="service.Impl.subscriServiceImpl">
		<property name="user" ref="usersDao"/>
		<property name="townx" ref="townDao"/>
	</bean>
	<bean id="favoriteService" class="service.Impl.favoriteServiceImpl">
		<property name="user" ref="usersDao"/>
		<property name="putaox" ref="putaoDao"/>
	</bean>
	<bean id="versionService" class="service.Impl.versionServiceImpl">
		<property name="version" ref="VersionDao"/>
	</bean>
	<bean id="generalService" class="service.Impl.generalServiceImpl">
		<property name="townx" ref="townDao"/>
		<property name="mess" ref="MessBoardDao"/>
		<property name="putaox" ref="putaoDao"/>
		<property name="commentx" ref="commentDao"/>
		<property name="userx" ref="usersDao"/>
	</bean>
	
	<!-- Spring 管理action并为其注入业务组件  -->
	<bean id="hello_action" class="action.hello"/>
	<bean id="registe_action" class="action.registe" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="login_action" class="action.login" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="applytown_action" class="action.applytown" scope="prototype">
		<property name="town" ref="townService"/>
	</bean>
	<bean id="authority_action" class="interceptor.Authority" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="jsoncheck_action" class="interceptor.JsonCheck" scope="prototype">
	</bean>
	<bean id="json_default" class="org.apache.struts2.json.JSONInterceptor" scope="prototype">
	</bean>
	<bean id="createputao_action" class="action.createputao" scope="prototype">
		<property name="putao" ref="putaoService"/>
	</bean>
	<bean id="getputao_action" class="action.getputao" scope="prototype">
		<property name="putao" ref="putaoService"/>
	</bean>
	<bean id="submitcomment_action" class="action.submitcomment" scope="prototype">
		<property name="comment" ref="commentService"/>
	</bean>
	<bean id="getcomment_action" class="action.getcomment" scope="prototype">
		<property name="comment" ref="commentService"/>
	</bean>
	<bean id="cname_action" class="action.cname" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="getmess_action" class="action.getmess" scope="prototype">
		<property name="mess" ref="messService"/>
	</bean>
	<bean id="submitmess_action" class="action.submitmess" scope="prototype">
		<property name="mess" ref="messService"/>
	</bean>
	<bean id="getgoods_action" class="action.getgoods" scope="prototype">
		<property name="good" ref="goodService"/>
	</bean>
	<bean id="dogood_action" class="action.dogood" scope="prototype">
		<property name="good" ref="goodService"/>
	</bean>
	<bean id="getsubscri_action" class="action.getsubscri" scope="prototype">
		<property name="subscri" ref="subscriService"/>
	</bean>
	<bean id="dosubscri_action" class="action.dosubscri" scope="prototype">
		<property name="subscri" ref="subscriService"/>
	</bean>
	<bean id="getfavorite_action" class="action.getfavorite" scope="prototype">
		<property name="favorite" ref="favoriteService"/>
	</bean>
	<bean id="dofavorite_action" class="action.dofavorite" scope="prototype">
		<property name="favorite" ref="favoriteService"/>
	</bean>
	<bean id="getfans_action" class="action.getfans" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="getuserinfo_action" class="action.getuserinfo" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="getsubslist_action" class="action.getsubslist" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="getfavolist_action" class="action.getfavolist" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="gethot_action" class="action.gethot" scope="prototype">
		<property name="town" ref="townService"/>
	</bean>
	<bean id="getnear_action" class="action.getnear" scope="prototype">
		<property name="town" ref="townService"/>
	</bean>
	<bean id="cwall_action" class="action.cwall" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="cuserinfo_action" class="action.cuserinfo" scope="prototype">
		<property name="user" ref="usersService"/>
	</bean>
	<bean id="update_action" class="action.update" scope="prototype">
		<property name="version" ref="versionService"/>
	</bean>
	<bean id="invisible_action" class="action.invisible" scope="prototype">
		<property name="tools" ref="generalService"/>
	</bean>
	<bean id="tologin_action" class="action.web.tologin" scope="prototype">
	</bean>
	<bean id="manager_action" class="action.web.manager" scope="prototype">
	</bean>
	<bean id="checkTown_action" class="action.web.checkTown" scope="prototype">
		<property name="townx" ref="townService"/>
		<property name="genseral" ref="generalService"/>
	</bean>
	<bean id="checkStory_action" class="action.web.checkStory" scope="prototype">
		<property name="putaox" ref="putaoService"/>
		<property name="genseral" ref="generalService"/>
	</bean>
	<bean id="createStory_action" class="action.web.createStory" scope="prototype">
		<property name="putaox" ref="putaoService"/>
	</bean>
	
	<!-- 配置事务相关 -->
	<bean id="transactionManager" 
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 配置事务切面Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配service包下所有以Impl结尾的类
			执行的所有方法 -->
		<aop:pointcut id="moPointcut"
			expression="execution(* service.Impl.*Impl.*(..))"/>
		<!-- 指定在txAdvice切入点应用txAdvice事务切面 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="moPointcut"/>
	</aop:config>
	
</beans>